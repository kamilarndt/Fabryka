# NextFab Cursor Rules

## Project Overview
You are working on NextFab - a production management system for Fabryka Dekoracji. This is a full-stack application built with Next.js 15, React 18, Chakra UI v3, Node.js/Express backend, and Supabase database.

## Architecture
- **Frontend**: Next.js 15 with App Router, React 18, Chakra UI v3, TanStack React Query
- **Backend**: Node.js, Express.js, TypeScript
- **Database**: Supabase (PostgreSQL)
- **Testing**: Vitest (unit), Playwright (E2E)
- **Styling**: Chakra UI v3 with design tokens

## Development Principles

### Test-Driven Development (TDD)
- ALWAYS write tests first before implementing logic
- Use Vitest for unit tests, Playwright for E2E tests
- Maintain 80%+ test coverage
- Red -> Green -> Refactor cycle

### Code Quality
- Use TypeScript strictly - no `any` types
- Follow ESLint rules and Prettier formatting
- Use meaningful variable and function names
- Write self-documenting code with JSDoc comments

### API Design
- Follow RESTful conventions
- Use proper HTTP status codes
- Implement proper error handling and validation
- Use Zod for schema validation

### UI/UX
- Use Chakra UI v3 components consistently
- Follow the design system in `docs/03_DESIGN_SYSTEM.md`
- Ensure mobile responsiveness
- Implement proper accessibility features

## File Structure
```
/
├── frontend/          # Next.js frontend
├── backend/           # Express.js backend
├── shared/            # Shared types and utilities
├── docs/              # Documentation
└── database/          # Database schemas and migrations
```

## Key Conventions
- Use PascalCase for components and types
- Use camelCase for functions and variables
- Use kebab-case for file names
- Use descriptive names that explain intent
- Always export types and interfaces
- Use proper error boundaries and loading states

## Database
- Use Supabase for all database operations
- Follow the schema defined in `database/init.sql`
- Use proper foreign key relationships
- Implement Row Level Security (RLS) policies
- Use UUIDs for all primary keys

## Environment
- Use environment variables for configuration
- Never commit secrets to version control
- Use proper environment separation (dev/staging/prod)

## Performance
- Implement proper caching strategies
- Use React Query for server state management
- Optimize bundle sizes
- Use proper image optimization
- Implement lazy loading where appropriate

## Security
- Validate all inputs on both frontend and backend
- Use proper authentication and authorization
- Implement CSRF protection
- Use HTTPS in production
- Follow OWASP security guidelines

## Documentation
- Keep README files updated
- Document complex business logic
- Use JSDoc for function documentation
- Maintain API documentation
- Document deployment procedures

## Git Workflow
- Use conventional commit messages
- Create feature branches for new features
- Use pull requests for code review
- Keep commits atomic and focused
- Write descriptive commit messages

## AI Assistant Guidelines
- Always follow TDD approach
- Generate comprehensive tests
- Ensure type safety
- Follow established patterns
- Provide clear explanations
- Suggest improvements and optimizations
- Help with debugging and troubleshooting